//<164>Feb  4 10:46:14 syslog sshd[607]: listening on 0.0.0.0 port 22.
morphlines : [
  {
    id : morphline1
    importCommands : ["com.cloudera.**","org.kitesdk.**"]

    commands : [
      {
        readLine {
          charset : UTF-8
        }

      }
      {
        addLocalHost {
          field : my_host
          useIP : false
        }

      }
      {
        addValues{
          first_name:["12"]
        }
      }
      {
        addValuesIfAbsent {
          # unless already present
          first_name : ["12"]
        }
      }
      {
        addValues{
          source_type : [text/log, text/log2]

          # add integer 123 to the pid field
          pid : [123,456,789]

          # add all values contained in the first_name field to the name field
          name : "@{first_name}"
          //time:"2012-04-13T10:53:43"
        }
      }
      {
        grok{
          dictionaryFiles : [src/main/resources/grok-dictionaries]
          expressions : {
            message : """<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}"""
          }
        }
        grok{

          expressions:{
            time:"""%{TIMESTAMP_ISO8601:stand_time}"""
          }
        }
      }
      {
        convertTimestamp {
          field : time
          inputTimezone : CST
          inputFormats : ["yyyy-MM-dd'T'HH:mm:ss:SSS","yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd'T'HH:mm:ss", "yyyy-MM-dd"]
          outputFormat : "yyyy-MM-dd'T'HH:mm:ss.SSS"
          outputTimezone : CST
        }
      }

      {
        if {
          conditions : [
            { contains:{ syslog_pri : ["164",164] } }
            { contains:{ my_host : ["tp-4208"] } }
          ]
          then : [
            { logInfo :{ format : "processing then..." } }
          ]
          else : [
            { logInfo :{ format : "processing else..." } }
          ]
        }
      }
      {
       java:{
         imports:"import java.util.*;"
         code:"""
         List pid = record.get("pid");
         System.out.println(pid);
         return child.process(record);
         """

       }


      }
      {
        setValues:{
          line:"aaa|bbb|Ccc"
        }
      }
      {
        split {
          inputField : line
          outputField : substrings
          separator : "|"
          isRegex : false
          #separator : """\s*,\s*"""
          #isRegex : true
          addEmptyStrings : false
          trim : true
        }
      }
      {
        setValues:{
          level:5
        }
      }

      {
        translate {
          field : level
          dictionary : {
            0 : Emergency
            1 : Alert
            2 : Critical
            3 : Error
            4 : Warning
            5 : Notice
            6 : Informational
            7 : Debug
          }
          fallback : Unknown # if no fallback is defined and no match is found then the command fails
        }
      }



      {
//        logInfo {
//          format : "syslog_pri: {},my_host:{},all_message:{}"
//          args : ["@{syslog_pri}","@{my_host}","@{}"]
//        }
//        logInfo{
//          format:"name:{},pid:{},first_name:{} name_absent:{},syslog_pri:{},my_host{},stand_time{}"
//          args:["@{name}","@{pid}","@{first_name}","@{first_name}","@{syslog_pri}","@{my_host}","@{stand_time}"]
//        }
        logInfo{
          format:"level:{}",
          args:["@{level}"]

        }
      }

    ]

  }
]
